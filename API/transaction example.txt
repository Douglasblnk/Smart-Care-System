import { Mysql } from '../../database/mysql'
import _ from 'lodash';
import { promises } from 'dns';
const connection = new Mysql('localhost', 'root', '', 'duasrodas').createConnection()

export default class Dao {

  async run(data: any) {
    try {
      console.log('post data', data);
      const response = await this.runQuery(data);

      console.log('Query response: ', response);

      return response;
    } catch (err) {
      throw err;
    }
  }

  runQuery(data: any) {
    return new Promise((resolve, reject) => {
      connection.beginTransaction((err: any) => {
        if (err) {
          connection.rollback(() => {
            console.log(err);
            connection.end();
            return reject(err);
          })
        }

        connection.query(data.query, data.post, async (err: any, result: any) => {
          if (err) connection.rollback(() => {
            const error = this.errorTreatment(err);
            return reject(error);
          });
          
          connection.commit((err: any) => {
            if (err) connection.rollback(() => {
              console.log('err', err);
              connection.end();
              return reject(err);
            });
          });

          console.log('result', result);

          

          const resolveResult = await this.validateResult(result, data)
          // if (_.isEmpty(result)) return reject({ result: false });
          

          // const queryResult = JSON.stringify(result[0]);

          // return resolve({ query: JSON.parse(queryResult) });
        });
      });
    });
  }

  errorTreatment(error: any) {
    const errorObj = JSON.parse(JSON.stringify(error))
    console.log('to aqui');
    if (_.has(errorObj, 'code')) {
      console.log('to aqui 2');
      if (errorObj.code === 'ER_DUP_ENTRY') return 'JÃ¡ existem registros com esses dados!'
    }
  }

  async validateResult(result: any, data: any) {
    if (data.query === 'insert') {

    } else if (data.query === 'select') {
      if (result.length === 0 || result === undefined) return false
      
      const queryResult = JSON.stringify(result[0]);
      

    }


    console.log(typeof newResult, newResult);
    // if (_.isEmpty(result)) return reject({ result: false });
          

    // const queryResult = JSON.stringify(result[0]);

    // return resolve({ query: JSON.parse(queryResult) });
  }
}
